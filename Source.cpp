#include <windows.h>
#include "polygon.h"
#include <cstdio>
#include <string>
#include <cmath>

#define IMG_1 { {0, 1}, {-1, 2}, {-2, 4}, {-1, 4}, {-3, 7}, {-2, 7}, {-4, 9}, {-3, 9}, {-7, 11}, {-5, 12}, {-4, 13}, { -4, 14 }, { -5, 13 }, { -6, 14 }, { -7, 13 }, { -8, 14 }, { -9, 13 }, { -10, 14 }, { -11, 13 }, { -11, 12 }, { -13, 14 }, { -12, 11 }, { -15,10 }, { -12, 9 }, { -11, 8 }, { -13, 6 }, { -11, 6 }, { -12, 4 }, { -12, 3 }, { -11, 1 }, { -10, -1 }, { -8, -4 }, { -6, -6 }, { -5, -8 }, { -6,-11 }, { -9,-11 }, { -8,-12 }, { -4,-12 }, { -3,-11 }, { -3,-10 }, { -5,-10 }, { -4, -9 }, { -2, -8 }, { -1,-11 }, { -4,-11 }, { -3,-12 }, { 1,-12 }, { 0,-11 }, { 2,-10 }, { 0,-10 }, { 0, -8 }, { 2, -7 }, { 3, -5 }, { 4, -5 }, { 5, -4 }, { 6, -6 }, { 6, -5 }, { 7, -6 }, { 8, -5 }, { 9, -6 }, { 9, -5 }, { 11,-7 }, { 11,-5 }, { 14,-9 }, { 13,-6 }, { 16,-1 }, { 16, -6 }, { 18,-11 }, { 21, -12 }, { 19,-10 }, { 17, -4 }, { 21, -8 }, { 24, -9 }, { 21, -7 }, { 17, -1 }, { 16, 1 }, { 15, 3 }, { 12, 8 }, { 9, 9 }, { 6, 9 }, { 3, 8 }, { 2, 5 }, { 3, 2 }, { 1, 1 }, { 0, 1 }}
#define IMG_2 { {-40 , 40}, {-40 , -40}, {40 , -40}, {40 , 40} }
#define IMG_3 { {80,130}, {60,130}, {40,150}, {40,170}, {60,190}, {140,190}, {160,170}, {160,150}, {140,130}, {120,130}, {120,60}, {130,50}, {130,30}, {110,20}, {90,20}, {70,30}, {70,50}, {80,60} }
#define IMG_4 {{110, 1199}, {107, 1190}, {119, 1168}, {131, 1147}, {132, 1121}, {148, 1090}, {159, 1071}, {166, 1041}, {169, 1017}, {164, 998}, {160, 969}, {159, 946}, {165, 927}, {174, 889}, {180, 867}, {182, 844}, {159, 817}, {138, 791}, {119, 764}, {133, 753}, {162, 726}, {191, 696}, {156, 710}, {72, 641}, {92, 612}, {116, 590}, {189, 540}, {232, 519}, {206, 518}, {176, 513}, {146, 508}, {144, 477}, {136, 446}, {125, 416}, {121, 390}, {124, 359}, {135, 333}, {148, 316}, {154, 299}, {158, 287}, {144, 282}, {149, 290}, {141, 286}, {126, 271}, {120, 245}, {116, 258}, {118, 280}, {121, 294}, {113, 287}, {104, 281}, {93, 257}, {83, 253}, {76, 240}, {72, 225}, {73, 199}, {84, 172}, {90, 158}, {77, 164}, {66, 175}, {62, 189}, {57, 199}, {59, 172}, {69, 156}, {82, 144}, {94, 138}, {106, 123}, {123, 102}, {156, 93}, {168, 76}, {179, 67}, {211, 65}, {246, 50}, {282, 61}, {318, 67}, {343, 63}, {369, 52}, {403, 57}, {430, 63}, {473, 79}, {486, 95}, {489, 88}, {484, 71}, {494, 79}, {495, 90}, {501, 82}, {500, 104}, {516, 80}, {519, 85}, {504, 114}, {538, 127}, {531, 132}, {552, 144}, {565, 161}, {574, 175}, {586, 197}, {596, 214}, {607, 235}, {614, 258}, {623, 282}, {625, 320}, {623, 358}, {628, 386}, {635, 415}, {646, 443}, {663, 457}, {680, 474}, {691, 498}, {714, 518}, {730, 553}, {740, 580}, {742, 599}, {738, 619}, {738, 633}, {766, 652}, {783, 666}, {789, 683}, {789, 707}, {783, 711}, {792, 733}, {809, 739}, {833, 743}, {846, 732}, {848, 748}, {844, 766}, {834, 785}, {817, 787}, {833, 806}, {848, 818}, {826, 815}, {847, 830}, {813, 815}, {780, 799}, {804, 820}, {817, 852}, {817, 863}, {809, 842}, {790, 821}, {803, 849}, {805, 873}, {803, 886}, {808, 909}, {823, 948}, {836, 980}, {848, 1085}, {834, 1111}, {818, 1124}, {782, 1136}, {775, 1160}, {746, 1187}, {688, 1198}, {711, 1157}, {714, 1131}, {730, 1061}, {737, 1028}, {739, 1009}, {753, 974}, {761, 913}, {771, 847}, {773, 772}, {765, 740}, {749, 698}, {725, 658}, {694, 617}, {659, 595}, {622, 583}, {603, 586}, {583, 575}, {565, 557}, {551, 540}, {536, 541}, {545, 527}, {539, 526}, {538, 493}, {543, 465}, {546, 449}, {529, 443}, {482, 434}, {467, 432}, {469, 439}, {483, 443}, {504, 448}, {523, 450}, {511, 456}, {486, 465}, {467, 467}, {449, 471}, {446, 491}, {441, 520}, {429, 508}, {412, 486}, {398, 446}, {389, 434}, {373, 445}, {354, 467}, {336, 480}, {307, 498}, {279, 504}, {245, 514}, {279, 504}, {307, 498}, {336, 480}, {354, 467}, {373, 445}, {389, 434}, {389, 425}, {394, 434}, {401, 437}, {416, 437}, {441, 422}, {467, 398}, {474, 384}, {473, 359}, {466, 340}, {452, 333}, {443, 332}, {429, 339}, {415, 348}, {406, 350}, {390, 380}, {393, 364}, {393, 345}, {381, 356}, {393, 323}, {396, 304}, {375, 321}, {378, 314}, {354, 324}, {367, 309}, {378, 291}, {387, 270}, {388, 249}, {387, 234}, {375, 254}, {363, 271}, {346, 286}, {354, 261}, {358, 239}, {355, 202}, {345, 252}, {345, 233}, {339, 246}, {326, 256}, {319, 259}, {327, 236}, {322, 244}, {325, 221}, {322, 201}, {315, 190}, {314, 209}, {309, 228}, {301, 245}, {291, 258}, {295, 235}, {295, 217}, {290, 198}, {282, 178}, {278, 199}, {276, 220}, {266, 236}, {270, 214}, {259, 229}, {264, 201}, {257, 183}, {248, 177}, {237, 180}, {236, 172}, {229, 181}, {223, 171}, {219, 178}, {210, 178}, {197, 185}, {186, 197}, {178, 221}, {172, 237}, {178, 253}, {168, 243}, {160, 262}, {162, 279}, {160, 262}, {168, 243}, {178, 253}, {172, 237}, {178, 221}, {186, 197}, {197, 185}, {210, 178}, {219, 178}, {223, 171}, {229, 181}, {236, 172}, {237, 180}, {248, 177}, {257, 183}, {264, 201}, {259, 229}, {270, 214}, {266, 236}, {276, 220}, {278, 199}, {282, 178}, {290, 198}, {295, 217}, {295, 235}, {291, 258}, {301, 245}, {309, 228}, {314, 209}, {315, 190}, {322, 201}, {325, 221}, {322, 244}, {327, 236}, {319, 259}, {326, 256}, {339, 246}, {345, 233}, {345, 252}, {355, 202}, {358, 239}, {354, 261}, {346, 286}, {363, 271}, {375, 254}, {387, 234}, {388, 249}, {387, 270}, {378, 291}, {367, 309}, {354, 324}, {378, 314}, {375, 321}, {396, 304}, {393, 323}, {381, 356}, {393, 345}, {393, 364}, {390, 380}, {406, 350}, {415, 348}, {429, 339}, {443, 332}, {452, 333}, {466, 340}, {473, 359}, {474, 384}, {467, 398}, {441, 422}, {416, 437}, {401, 437}, {394, 434}, {389, 425}, {389, 434}, {373, 445}, {354, 467}, {336, 480}, {307, 498}, {279, 504}, {245, 514}, {279, 504}, {307, 498}, {336, 480}, {354, 467}, {373, 445}, {389, 434}, {398, 446}, {412, 486}, {429, 508}, {441, 520}, {446, 491}, {449, 471}, {467, 467}, {486, 465}, {511, 456}, {523, 450}, {504, 448}, {483, 443}, {469, 439}, {467, 432}, {482, 434}, {529, 443}, {546, 449}, {543, 465}, {538, 493}, {539, 526}, {545, 527}, {536, 541}, {551, 540}, {565, 557}, {583, 575}, {603, 586}, {622, 583}, {659, 595}, {694, 617}, {725, 658}, {749, 698}, {765, 740}, {773, 772}, {771, 847}, {761, 913}, {753, 974}, {739, 1009}, {737, 1028}, {730, 1061}, {714, 1131}, {711, 1157}, {688, 1198}, {667, 1198}, {583, 1196}, {550, 1194}, {507, 1195}, {473, 1195}, {485, 1177}, {508, 1121}, {506, 1093}, {513, 1062}, {505, 1037}, {517, 1019}, {512, 998}, {528, 939}, {526, 906}, {519, 868}, {531, 804}, {548, 748}, {571, 696}, {596, 650}, {623, 630}, {650, 624}, {677, 635}, {650, 624}, {623, 630}, {596, 650}, {571, 696}, {548, 748}, {531, 804}, {519, 868}, {526, 906}, {528, 939}, {512, 998}, {517, 1019}, {505, 1037}, {513, 1062}, {506, 1093}, {508, 1121}, {500, 1134}, {482, 1138}, {458, 1143}, {454, 1087}, {444, 1022}, {431, 957}, {414, 904}, {396, 852}, {381, 810}, {370, 775}, {366, 737}, {358, 690}, {439, 666}, {445, 659}, {457, 647}, {476, 625}, {492, 601}, {514, 572}, {530, 561}, {514, 572}, {492, 601}, {479, 609}, {466, 622}, {448, 631}, {431, 632}, {415, 644}, {386, 655}, {394, 628}, {410, 599}, {434, 573}, {438, 538}, {434, 573}, {410, 599}, {394, 628}, {386, 655}, {415, 644}, {431, 632}, {448, 631}, {466, 622}, {479, 609}, {492, 601}, {514, 572}, {530, 561}, {514, 572}, {492, 601}, {476, 625}, {457, 647}, {445, 659}, {439, 666}, {358, 690}, {366, 737}, {370, 775}, {381, 810}, {396, 852}, {414, 904}, {431, 957}, {444, 1022}, {428, 1010}, {412, 994}, {402, 973}, {396, 948}, {390, 903}, {401, 871}, {401, 871}, {401, 871}, {390, 903}, {396, 948}, {402, 973}, {412, 994}, {401, 1001}, {385, 1004}, {361, 1006}, {338, 1003}, {322, 986}, {311, 963}, {305, 935}, {298, 899}, {300, 876}, {305, 836}, {305, 811}, {300, 785}, {283, 755}, {271, 708}, {275, 672}, {277, 633}, {285, 603}, {277, 633}, {275, 672}, {271, 708}, {283, 755}, {300, 785}, {305, 811}, {305, 836}, {300, 876}, {298, 899}, {305, 935}, {311, 963}, {322, 986}, {332, 1012}, {337, 1037}, {345, 1078}, {348, 1114}, {344, 1129}, {326, 1137}, {302, 1140}, {299, 1126}, {308, 1083}, {312, 1044}, {306, 1016}, {291, 989}, {271, 954}, {254, 930}, {238, 906}, {219, 886}, {206, 868}, {191, 854}, {206, 868}, {219, 886}, {238, 906}, {254, 930}, {271, 954}, {291, 989}, {306, 1016}, {312, 1044}, {308, 1083}, {299, 1126}, {302, 1140}, {326, 1137}, {344, 1129}, {344, 1157}, {345, 1169}, {328, 1171}, {326, 1187}, {327, 1195}, {288, 1196}}




#define POLY_POINTS IMG_4

// определяем константы для настройки окна и отрисовки графики
#define X_DEFAULT 200
#define Y_DEFAULT 200
#define SHIFT 10
#define ROTATE 0.2
#define SCALE 1.2

c_Polygon g_poly;
int g_pos_x = X_DEFAULT;
int g_pos_y = Y_DEFAULT;
int mouse_x = 0;
int mouse_y = 0;
int delta_x;
int delta_y;
bool redraw_flag = true;
bool left_r_flag = false;
bool right_r_flag = false;
short wheel_delta = 0;
POINT g_center;

HWND hWnd;

#define WINDOW_CLASS_NAME charToWchar("WindowClass")
#define WINDOW_TITLE charToWchar("Polygon WinAPI")
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 800

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

char* wideCharToMultiByte(const wchar_t* wideCharString)
{
    // Вычисляем длину строки в байтах
    int len = WideCharToMultiByte(CP_UTF8, 0, wideCharString, -1, NULL, 0, NULL, NULL);

    // Выделяем память под строку
    char* multiByteString = new char[len];

    // Преобразуем строку
    WideCharToMultiByte(CP_UTF8, 0, wideCharString, -1, multiByteString, len, NULL, NULL);

    return multiByteString;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    g_poly.init(POLY_POINTS);
    g_poly.SetPosition({ g_pos_x, g_pos_y });
    // Регистрируем класс окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = WINDOW_CLASS_NAME;
    wc.style = CS_HREDRAW | CS_VREDRAW;

    RegisterClass(&wc);

    hWnd = CreateWindow(
        WINDOW_CLASS_NAME,
        WINDOW_TITLE,
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        WINDOW_WIDTH, WINDOW_HEIGHT,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (!hWnd)
    {
        return 0;
    }

    // Показываем окно
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);
    SetGraphicsMode(GetDC(hWnd), GM_ADVANCED);

    // Запускаем цикл обработки сообщений
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    if (left_r_flag) {
        g_poly.SetRotation(-ROTATE);
        redraw_flag = true;
    }
    if (right_r_flag) {
        g_poly.SetRotation(ROTATE);
        redraw_flag = true;
    }

    switch (message)
    {
    case WM_PAINT:
    {
        if (redraw_flag)
        {
            RECT rect = { 0 };
            GetWindowRect(hWnd, &rect);

            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            ValidateRect(hWnd, NULL);

            // Создаем буферный контекст устройства и буферную битовую карту
            HDC hdcBuffer = CreateCompatibleDC(hdc);
            HBITMAP hBitmap = CreateCompatibleBitmap(hdc, abs(rect.left - rect.right), abs(rect.top - rect.bottom));
            HBITMAP hBitmapOld = (HBITMAP)SelectObject(hdcBuffer, hBitmap);

            // Очищаем буферную битовую карту
            PatBlt(hdcBuffer, 0, 0, abs(rect.left - rect.right), abs(rect.top - rect.bottom), WHITENESS);

            // Рисуем на буферной битовой карте
            g_poly.Draw(hdcBuffer);

            // Копируем буферную битовую карту на контекст устройства окна
            BitBlt(hdc, 0, 0, abs(rect.left - rect.right), abs(rect.top - rect.bottom), hdcBuffer, 0, 0, SRCCOPY);

            // Освобождаем ресурсы
            SelectObject(hdcBuffer, hBitmapOld);
            DeleteObject(hBitmap);
            DeleteDC(hdcBuffer);

            InvalidateRect(hWnd, NULL, TRUE);
            EndPaint(hWnd, &ps);

            redraw_flag = false;
        }
        break;
    }

    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_LBUTTONDOWN:
        // Левая кнопка мыши нажата
        left_r_flag = true;
        break;

    case WM_RBUTTONDOWN:
        // Правая кнопка мыши нажата
        right_r_flag = true;
        break;

    case WM_LBUTTONUP:
        // Левая кнопка мыши нажата
        left_r_flag = false;
        break;

    case WM_RBUTTONUP:
        // Правая кнопка мыши нажата
        right_r_flag = false;
        break;

    case WM_MOUSEMOVE:
    {
        // Перемещение мыши
        g_center = g_poly.GetCenter();
        mouse_x = LOWORD(lParam);
        mouse_y = HIWORD(lParam);
        delta_x = mouse_x - g_center.x;
        delta_y = mouse_y - g_center.y;
        g_poly.SetPosition({ delta_x, delta_y });
        redraw_flag = true;
        break;
    }

    case WM_MOUSEWHEEL:
    {
        // Колесо мыши
        wheel_delta = GET_WHEEL_DELTA_WPARAM(wParam);
        if (wheel_delta > 0) {
            g_poly.SetScale(SCALE);
            redraw_flag = true;
        }
        if (wheel_delta < 0) {
            g_poly.SetScale(1.0 / SCALE);
            redraw_flag = true;
        }
        wheel_delta = 0;
        break;
    }

    case WM_KEYDOWN:
    {
        redraw_flag = true;
        switch (int(wParam))
        {

        case '1':
            g_poly.SetColor(RGB(255, 0, 0));
            break;

        case '2':
            g_poly.SetColor(RGB(0, 255, 0));
            break;

        case '3':
            g_poly.SetColor(RGB(0, 0, 255));
            break;

        case '4':
            g_poly.SetColor(RGB(255, 0, 250));
            break;

        case '5':
            g_poly.LGBT(GetDC(hWnd), RGB(255, 0, 0), RGB(0, 255, 0), 1500);
            g_poly.LGBT(GetDC(hWnd), RGB(0, 255, 0), RGB(0, 0, 255), 1500);
            break;

        case 0x5a:
            PostQuitMessage(0);
            break;

        default:
            break;
        }
        break;
    }

    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }

    return 0;
}
